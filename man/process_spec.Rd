% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_spec.R
\name{process_spec}
\alias{process_spec}
\alias{process_spec.default}
\alias{process_spec.OpenSpecy}
\alias{sample_spec}
\alias{sample_spec.default}
\alias{sample_spec.OpenSpecy}
\title{Preprocess Spectra}
\usage{
process_spec(x, ...)

\method{process_spec}{default}(x, ...)

\method{process_spec}{OpenSpecy}(
  x,
  active_processing = T,
  adj_intensity_decision = F,
  type = "none",
  conform_decision = T,
  new_wavenumbers = NULL,
  res = 5,
  range_decision = F,
  min_range = 0,
  max_range = 6000,
  flatten_decision = F,
  flatten_min = 2200,
  flatten_max = 2420,
  smooth_decision = F,
  smooth_polynomial = 3,
  smooth_window = 11,
  baseline_decision = F,
  baseline_selection = "Polynomial",
  raw_baseline = F,
  baseline_polynomial = 8,
  wavenumber_fit = NULL,
  intensity_fit = NULL,
  derivative_decision = T,
  derivative_order = 1,
  derivative_polynomial = 3,
  abs = T,
  derivative_window = 11,
  ...
)

sample_spec(x, ...)

\method{sample_spec}{default}(x, ...)

\method{sample_spec}{OpenSpecy}(x, ...)
}
\arguments{
\item{x}{An \code{OpenSpecy} object containing metadata and spectral data.}

\item{active_processing}{Logical value indicating whether to perform preprocessing. If \code{TRUE}, the preprocessing steps will be applied. If \code{FALSE}, the original data will be returned.}

\item{adj_intensity_decision}{A Logical describing whether to adjust the intensity units.}

\item{type}{Type of intensity adjustment to use. Can be one of "none", "transmittance", or "reflectance".}

\item{conform_decision}{Whether to conform the spectra to a new wavenumber range and resolution.}

\item{new_wavenumbers}{A new range to conform to, will use the min and max of all values.}

\item{res}{The resoltion for the conforming the spectra.}

\item{range_decision}{Logical value indicating whether to restrict the wavenumber range of the spectra.}

\item{min_range}{Numeric value specifying the minimum wavenumber for range restriction.}

\item{max_range}{Numeric value specifying the maximum wavenumber for range restriction.}

\item{flatten_decision}{Logical value indicating whether to flatten the range around the carbon dioxide region.}

\item{flatten_min}{Numeric value specifying the minimum wavenumber for the carbon dioxide region.}

\item{flatten_max}{Numeric value specifying the maximum wavenumber for the carbon dioxide region.}

\item{smooth_decision}{Logical value indicating whether to apply a smoothing filter to the spectra.}

\item{smooth_polynomial}{Integer value specifying the polynomial order for smoothing.}

\item{smooth_window}{Integer value specifying the window size for smoothing.}

\item{baseline_decision}{Logical value indicating whether to subtract the baseline from the spectra.}

\item{baseline_selection}{Character value specifying the type of baseline subtraction method. Options are "Polynomial", "Linear", "Horizontal", or "Vertical".}

\item{raw_baseline}{Logical value indicating whether to use the raw baseline values for subtraction.}

\item{baseline_polynomial}{Integer value specifying the polynomial order for baseline subtraction.}

\item{wavenumber_fit}{Numeric vector of wavenumbers used for baseline fitting.}

\item{intensity_fit}{Numeric vector of intensities used for baseline fitting.}

\item{derivative_decision}{Logical value indicating whether to apply derivative to the spectra.}

\item{derivative_order}{Integer value specifying the order of the derivative.}

\item{derivative_polynomial}{Integer value specifying the polynomial order for derivative calculation.}

\item{abs}{Logical value indicating whether to calculate the absolute values of the derivative.}

\item{derivative_window}{Integer value specifying the window size for derivative calculation.}

\item{\ldots}{further arguments passed to subfunctions.}
}
\value{
\code{process_spec()} returns an \code{OpenSpecy} object with preprocessed
spectra based on the specified parameters.
\code{sample_spec()} returns an \code{OpenSpecy} object with a subset of the spectra.
}
\description{
Process spectra data by applying various preprocessing steps. This is a monolithic function for all common preprocessing steps in one place.
}
\details{
\code{sample_spec()} samples spectra from an \code{OpenSpecy} object.
}
\examples{
data("raman_hdpe")
plot(raman_hdpe)

# Process spectra with range restriction and baseline subtraction
process_spec(raman_hdpe,
                active_processing = TRUE,
                range_decision = TRUE,
                min_range = 500,
                max_range = 3000,
                baseline_decision = TRUE,
                baseline_selection = "Polynomial",
                baseline_polynomial = 8,
                derivative_decision = FALSE) |>
  lines(col = "darkred")

# Process spectra with smoothing and derivative
process_spec(raman_hdpe,
                active_processing = TRUE,
                smooth_decision = TRUE,
                smooth_polynomial = 3,
                smooth_window = 11,
                derivative_decision = TRUE,
                derivative_order = 1,
                derivative_polynomial = 3,
                derivative_window = 11) |>
  lines(col = "darkgreen")

# Sampling a spectrum
tiny_map <- read_any(read_extdata("CA_tiny_map.zip"))
sampled <- sample_spec(tiny_map, size = 3)
print(sampled)
plot(sampled)

}
